variables:
  WINDOWS_IMAGE: 'electronuserland/builder:18-wine'
  LINUX_IMAGE: 'node:18.8.0'
  MACOS_IMAGE: 'macos-12-xcode-14'
  USE_HARD_LINKS: 'false'
  ELECTRON_CACHE: ".cache/electron"
  ELECTRON_BUILDER_CACHE: ".cache/electron-builder"

# Set up npm cache using package-lock.json as a key
cache:
  - key:
      files:
        - package-lock.json
    paths:
      - .npm/

# macOS: Install Apple WWDR certificates
include:
  - remote: https://gitlab.com/gitlab-org/incubation-engineering/devops-for-mobile-apps/demo-mobile-ci-templates/-/raw/main/Preinstall-Apple-WWDR-Certificates.gitlab-ci.yml

stages:
  - prepare
  - checks
  - package
  - release

####################################################################################################
######################################## TEMPLATES #################################################
####################################################################################################

.brew_template: &brew
  before_script:
    - HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew uninstall node@17
    - HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew install node@18
    - export PATH="/usr/local/opt/node@18/bin:$PATH"
    - export LDFLAGS="-L/usr/local/opt/node@18/lib"
    - export CPPFLAGS="-I/usr/local/opt/node@18/include"

.npm_ci_template: &npm_ci
  stage: prepare
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
    - if: '$CI_MERGE_REQUEST_ID'
      when: always
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
  script:
    - npm config set -- //gitlab.com/api/v4/packages/npm/:_authToken=$GITLAB_ACCESS_TOKEN
    - npm config set @koii-network:registry https://gitlab.com/api/v4/packages/npm/
    - npm ci --cache .npm --prefer-offline --no-audit --progress=false
  artifacts:
    name: 'artifacts'
    untracked: true
    expire_in: 10 mins
    paths:
      - node_modules/

.lint_template: &lint
  stage: checks
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: '$CI_MERGE_REQUEST_ID'
      when: always
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
  script:
    - npm run lint

.test_template: &test
  stage: checks
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: '$CI_MERGE_REQUEST_ID'
      when: always
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
  script:
    - npm run test

.package_rules_template: &package_rules
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+-pre+$/'
      when: always
  stage: package

.release_rules_template: &release_rules
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
      when: always
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+-pre+$/'
      when: never
  stage: release

####################################################################################################
######################################## PREPARE ###################################################
####################################################################################################

install_win:
  image: $WINDOWS_IMAGE
  <<: *npm_ci

install_linux:
  image: $LINUX_IMAGE
  <<: *npm_ci

install_macos:
  image: $MACOS_IMAGE
  <<: *brew
  <<: *npm_ci
  tags:
    - shared-macos-amd64

####################################################################################################
########################################## TEST ####################################################
####################################################################################################

lint_win:
  image: $WINDOWS_IMAGE
  needs: ['install_win']
  dependencies:
    - install_win
  <<: *lint

lint_linux:
  image: $LINUX_IMAGE
  needs: ['install_linux']
  dependencies:
    - install_linux
  <<: *lint

lint_macos:
  image: $MACOS_IMAGE
  needs: ['install_macos']
  dependencies:
    - install_macos
  <<: *brew
  <<: *lint
  tags:
    - shared-macos-amd64

test_win:
  image: $WINDOWS_IMAGE
  needs: ['install_win']
  dependencies:
    - install_win
  <<: *test

test_linux:
  image: $LINUX_IMAGE
  needs: ['install_linux']
  dependencies:
    - install_linux
  <<: *test

test_macos:
  image: $MACOS_IMAGE
  needs: ['install_macos']
  dependencies:
    - install_macos
  
  <<: *test
  tags:
    - shared-macos-amd64

####################################################################################################
######################################## PACKAGE ###################################################
####################################################################################################

package_win:
  image: $WINDOWS_IMAGE
  needs: ['install_win']
  dependencies:
    - install_win
  <<: *package_rules
  script:
    - npm run package -- -w
  artifacts:
    paths:
      - 'release/build/*.exe'

package_linux:
  image: $LINUX_IMAGE
  needs: ['install_linux']
  dependencies:
    - install_linux
  <<: *package_rules
  before_script:
    - apt-get update && apt-get install rpm -y
  script:
    - npm run package
  artifacts:
    paths:
      - 'release/build/*.AppImage'
      - 'release/build/*.deb'
      - 'release/build/*.rpm'
      - 'release/build/*.tar.gz'
      - 'release/build/*.snap'

package_macos:
  image: $MACOS_IMAGE
  needs: ['install_macos']
  dependencies:
    - install_macos
  <<: *brew
  <<: *package_rules
  script:
    - npm run package
  tags:
    - shared-macos-amd64
  artifacts:
    paths:
      - 'release/build/*.zip'
      - 'release/build/*.dmg'

####################################################################################################
#################################### PACKAGE AND RELEASE ###########################################
####################################################################################################

release_win:
  image: $WINDOWS_IMAGE
  needs: ['install_win']
  dependencies:
    - install_win
  <<: *release_rules
  script:
    - npm run release -- -w
  artifacts:
    paths:
      - 'release/build/*.exe'

release_linux:
  image: $LINUX_IMAGE
  needs: ['install_linux']
  dependencies:
    - install_linux
  <<: *release_rules
  before_script:
    - apt-get update && apt-get install rpm -y
  script:
    - npm run release
  artifacts:
    paths:
      - 'release/build/*.AppImage'
      - 'release/build/*.deb'
      - 'release/build/*.rpm'
      - 'release/build/*.tar.gz'
      - 'release/build/*.snap'

release_macos:
  image: $MACOS_IMAGE
  needs: ['install_macos']
  dependencies:
    - install_macos
  <<: *brew
  <<: *release_rules
  script:
    - npm run release
  tags:
    - shared-macos-amd64
  artifacts:
    paths:
      - 'release/build/*.zip'
      - 'release/build/*.dmg'